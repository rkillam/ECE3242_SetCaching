-- Compute C = A - B
--                                                          64 bit memory address locations
-- row = x"4F8"                                             -> [01 | 00 11 | 11 10] 00 -> x"13E"
-- col = x"4F9"                                             -> [01 | 00 11 | 11 10] 01 -> x"13E"
-- A = x"500"                   -> x"500" + (row * col)     -> [01 | 01 00 | 00 00]00 -> x"140"
-- B = x"500" + (row * col)     -> x"500" + (row * col * 2)
-- C = x"500" + (row * col * 2) -> x"500" + (row * col * 3)

3000	-- R0 <= 0 FINAL
3101	-- R1 <= 1 FINAL

C4F8	-- RF <= x"4F8" Row size address
A2F0	-- R2 <= M[RF]  Row size

C4F9	-- RF <= x"4F9" Col size address
A3F0	-- R3 <= M[RF]  Col size

B223	-- R2 <= R2 * R3	Matrix size FINAL
4320	-- R3 <= R2 + R0 	Matrix size

C500	-- RF <= x"500" Starting address of Matrix A
44F0	-- R4 <= RF + R0

4542	-- R5 <= R4 + R2 [0x0500 + (row * col) Starting address of Matrix B]

4652	-- R6 <= R5 + R2 [(0x0500 + (row * col)) + (row * col) Starting address of Matrix C]

4A60	-- RA <= R6 + R0 [Starting address of Matrix C]

-- Now: RF is accumulator
--		R0 is 0 FINAL
--		R1 is 1 FINAL
--      R2 is matrix size FINAL
--      R3 is matrix size
--      R4 holds starting address of matrix A
--      R5 holds starting address of matrix B
--      R6 holds starting address of matrix C
--      RA holds starting address of matrix C

6317	-- IF R3 == 0 THEN goto END_SUBTRACTION_LOOP (Probably 0x17)	START_SUBTRACTION_LOOP (#13)

A740	-- R7 <= M[R4] (A[R4])
A850	-- R8 <= M[R5] (B[R5])
5778	-- R7 <= R7 - R8 (A[R4] - B[R5])
2670	-- M[R6] <= R7 (C[R6])

-- Now: C[R6] = A[R4] - B[R5]

5331	-- R3 <= R3 - R1 [Number of elements left to do]
4441	-- R4 <= R4 + R1
4551	-- R5 <= R5 + R1
4661	-- R6 <= R6 + R1

-- Incremented addresses

600D	-- IF R0 == 0 THEN goto START_LOOP (Probably 0x0D = #13) ALWAYS JUMPS!!

-- Done matrix subtraction

4320	-- R3 <= R2 + R0 Matrix size	END_SUBTRACTION_LOOP (#23)

6321	-- IF R3 == 0 THEN goto END_PRINT_LOOP (Probably 0x21 = #33)	START_PRINT_LOOP (#24)

ABA0	-- RB <= M[RA] (C[RA]) 
1BFF	-- M[0xFF] <= RB
70FF	-- print(M[0xFF])

-- Printed C[RA]

4AA1	-- RA <= RA + R1
5331	-- R3 <= R3 - R1 [Number of elements left to print]
6018	-- IF R0 == 0 THEN goto START_PRINT_LOOP (Probably 0x18 = #24) ALWAYS JUMP

-- Done printing C

F000	-- HALT		END_PRINT_LOOP (#33)

-- Fast input
30003101C4F8A2F0	C4F9A3F0B2234320
C50044F045424652	4A606317A740A850
5778267053314441	45514661600D4320
6321ABA01BFF70FF	4AA153316018F000		

-- Matrix sizing
0014001400000000	

-- 20x20 matrices
0001000200030004	0005000600070008
0009000A000B000C	000D000E000F0010
0011001200130014	0015001600170018
0019001A001B001C	001D001E001F0020
0021002200230024	0025002600270028
0029002A002B002C	002D002E002F0030
0031003200330034	0035003600370038
0039003A003B003C	003D003E003F0040
0041004200430044	0045004600470048
0049004A004B004C	004D004E004F0050
0051005200530054	0055005600570058
0059005A005B005C	005D005E005F0060
0061006200630064	0065006600670068
0069006A006B006C	006D006E006F0070
0071007200730074	0075007600770078
0079007A007B007C	007D007E007F0080
0081008200830084	0085008600870088
0089008A008B008C	008D008E008F0090
0091009200930094	0095009600970098
0099009A009B009C	009D009E009F00A0
00A100A200A300A4	00A500A600A700A8
00A900AA00AB00AC	00AD00AE00AF00B0
00B100B200B300B4	00B500B600B700B8
00B900BA00BB00BC	00BD00BE00BF00C0
00C100C200C300C4	00C500C600C700C8
00C900CA00CB00CC	00CD00CE00CF00D0
00D100D200D300D4	00D500D600D700D8
00D900DA00DB00DC	00DD00DE00DF00E0
00E100E200E300E4	00E500E600E700E8
00E900EA00EB00EC	00ED00EE00EF00F0
00F100F200F300F4	00F500F600F700F8
00F900FA00FB00FC	00FD00FE00FF0100
0101010201030104	0105010601070108
0109010A010B010C	010D010E010F0110
0111011201130114	0115011601170118
0119011A011B011C	011D011E011F0120
0121012201230124	0125012601270128
0129012A012B012C	012D012E012F0130
0131013201330134	0135013601370138
0139013A013B013C	013D013E013F0140
0141014201430144	0145014601470148
0149014A014B014C	014D014E014F0150
0151015201530154	0155015601570158
0159015A015B015C	015D015E015F0160
0161016201630164	0165016601670168
0169016A016B016C	016D016E016F0170
0171017201730174	0175017601770178
0179017A017B017C	017D017E017F0180
0181018201830184	0185018601870188
0189018A018B018C	018D018E018F0190
0190018F018E018D	018C018B018A0189
0188018701860185	0184018301820181
0180017F017E017D	017C017B017A0179
0178017701760175	0174017301720171
0170016F016E016D	016C016B016A0169
0168016701660165	0164016301620161
0160015F015E015D	015C015B015A0159
0158015701560155	0154015301520151
0150014F014E014D	014C014B014A0149
0148014701460145	0144014301420141
0140013F013E013D	013C013B013A0139
0138013701360135	0134013301320131
0130012F012E012D	012C012B012A0129
0128012701260125	0124012301220121
0120011F011E011D	011C011B011A0119
0118011701160115	0114011301120111
0110010F010E010D	010C010B010A0109
0108010701060105	0104010301020101
010000FF00FE00FD	00FC00FB00FA00F9
00F800F700F600F5	00F400F300F200F1
00F000EF00EE00ED	00EC00EB00EA00E9
00E800E700E600E5	00E400E300E200E1
00E000DF00DE00DD	00DC00DB00DA00D9
00D800D700D600D5	00D400D300D200D1
00D000CF00CE00CD	00CC00CB00CA00C9
00C800C700C600C5	00C400C300C200C1
00C000BF00BE00BD	00BC00BB00BA00B9
00B800B700B600B5	00B400B300B200B1
00B000AF00AE00AD	00AC00AB00AA00A9
00A800A700A600A5	00A400A300A200A1
00A0009F009E009D	009C009B009A0099
0098009700960095	0094009300920091
0090008F008E008D	008C008B008A0089
0088008700860085	0084008300820081
0080007F007E007D	007C007B007A0079
0078007700760075	0074007300720071
0070006F006E006D	006C006B006A0069
0068006700660065	0064006300620061
0060005F005E005D	005C005B005A0059
0058005700560055	0054005300520051
0050004F004E004D	004C004B004A0049
0048004700460045	0044004300420041
0040003F003E003D	003C003B003A0039
0038003700360035	0034003300320031
0030002F002E002D	002C002B002A0029
0028002700260025	0024002300220021
0020001F001E001D	001C001B001A0019
0018001700160015	0014001300120011
0010000F000E000D	000C000B000A0009
0008000700060005	0004000300020001